[{"categories":null,"content":"本来想在Gitee搭建博客, 居然要手机号码, 算了还是用Github. ","date":"2021-02-06","objectID":"/post/introduction/:0:0","tags":null,"title":"Introduction","uri":"/post/introduction/"},{"categories":null,"content":"Coding ","date":"2021-02-06","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"1423. 可获得的最大点数 ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:0:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"},{"categories":null,"content":"题目 几张卡牌 排成一行，每张卡牌都有一个对应的点数。点数由整数数组 cardPoints 给出。 每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 k 张卡牌。 你的点数就是你拿到手中的所有卡牌的点数之和。 给你一个整数数组 cardPoints 和整数 k，请你返回可以获得的最大点数。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:1:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"},{"categories":null,"content":"2种思路 每次从两端取最大的数累加 使用滑动窗口累加 ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:2:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"},{"categories":null,"content":"第1次尝试(解答错误) class Solution { public: int maxScore(const vector\u003cint\u003e \u0026cardPoints, int k) { if (cardPoints.size() == 1) { return cardPoints[0]; } auto l = \u0026cardPoints[0]; auto r = \u0026cardPoints[cardPoints.size() - 1]; int result {0}; while (k \u003e 0) { if (*l \u003e *r) { result += *l; ++l; --k; } else if (*r \u003e *l) { result += *r; --r; --k; } else { while (*l == *r) { result += *l; ++l; --r; --k; if (k \u003c= 0) { break; } // 回滚 if (*l \u003e *r) { result += *l; ++l; ++r; --k; } else if (*r \u003e *l) { result += *r; --l; --r; --k; } if (k \u003c= 0) { break; } } } } return result; } } 测试案例{11, 49, 100, 20, 86, 29, 72}, 4不通过. 按每次取最大值的思路会取到: 72, 29, 86, 20 = 207 而实际: 72, 11, 49, 100 = 232 才是解. ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:3:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"},{"categories":null,"content":"第2次尝试 由于每次都是从队列头或者队列尾取数, 所以联想到环形数组, 从而发现这是一个滑动窗口. 由于窗口会跨越边界, 分成\"两扇窗\"进行计算, 使用l和r来记录两扇窗的宽度. int maxScore(const vector\u003cint\u003e \u0026cardPoints, int k) { auto result {0}; for (auto l = k, r = 0; l \u003e= 0; --l, ++r) { auto sum = accumulate(cardPoints.begin(), cardPoints.begin() + l, 0) + accumulate(cardPoints.rbegin(), cardPoints.rbegin() + r, 0); result = max(sum, result); } return result; } 执行结果正确了, 但每次滑动窗口都要重新计算窗口内的值, 所以出现\"超出时间限制\". ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:4:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"},{"categories":null,"content":"第3次尝试 由于窗口每次都是滑动1个元素, 所以可以复用上一个的结果, 使用边界元素更新和即可. int maxScore(const vector\u003cint\u003e \u0026cardPoints, int k) { auto l = \u0026cardPoints[0] + k - 1; auto r = \u0026cardPoints[cardPoints.size()-1]; auto result = accumulate(\u0026cardPoints[0], l+1, 0); auto lastSum = result; while (l \u003e= \u0026cardPoints[0]) { lastSum = lastSum - (*l) + (*r); result = max(result, lastSum); --l; --r; } return result; } ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:5:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"},{"categories":null,"content":"总结 太菜了 能使用第1种方法解决的问题前提应该是每一步都能保证是最优解, 本题不适合 第1种方法(错误答案)的代码反而比正确答案代码复杂 ","date":"2021-02-06","objectID":"/post/1432.maximum-points-you-can-obtain-from-cards/:6:0","tags":null,"title":"1432.可获得的最大点数","uri":"/post/1432.maximum-points-you-can-obtain-from-cards/"}]